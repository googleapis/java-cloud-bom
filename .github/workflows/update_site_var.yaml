name: Update site variables for Github Pages with automated versions
# Run this workflow upon published release
on:
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  update_site_variables:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: pip install pyyaml toml # Needed for update_site_params.py script

    - name: Create and update initial javaModulesVersions.yaml
      run: |
        echo "Creating initial variables.yaml file..."
        python .github/workflows/javadocs_scripts/parse_versionstxt.py # Run script to update the site/data/javaModulesVersions.yaml file for the libraries_bom version

    - name: Update javaModulesVersions.yaml using google-cloud-bom and libraries-bom POM.xml
      run: |
        echo "Updating variables.yaml file using google-cloud-bom and libraries-bom POM.xml files..."
        python .github/workflows/javadocs_scripts/parse_pom.py ./versions.txt # Run script to update the site/data/javaModulesVersions.yaml file for the gapic_libraries_bom version and handwritten library versions

    - name: Update site param for libraries-bom version
      run: |
        echo "Updating Github Pages site param for libraries-bom version"
        python .github/workflows/javadocs_scripts/update_site_params.py # Run script to update the site/config.toml file for the libraries_bom version

    - name: Update repo_versions
      run: |
        echo "Updating repo versions for checkout and handwritten modules"
        python .github/workflows/javadocs_scripts/update_repo_versions.py # Run script to update the handwritten_libraries_javadocs_modules.txt and repos_for_versionstxt.txt files

    - name: Update new modules and links for sdk-platform-java and google-cloud-java
      run: |
        while read -r repo directory tag artifact
        do
          echo "REPO=$repo"
          echo "DIRECTORY=$directory"
          echo "TAG=$tag"
          git clone https://github.com/${repo}.git
          git -C "${directory}" checkout $tag
          echo "Updating variables.yaml file using ${repo}'s versions.txt file"
          python .github/workflows/javadocs_scripts/parse_versionstxt.py ${directory}/versions.txt
          if [[ "$repo" == "googleapis/google-cloud-java" ]]; then
            echo "Updating variables.yaml file using ${repo}'s versions.txt file as well as client/product links"
            python .github/workflows/javadocs_scripts/updateClientProductDocumentationLinks.py # Update client/product doc links based on .repo-metadata.json files
            python .github/workflows/javadocs_scripts/update_googlecloudjava_javadocs_modules.py ${directory}/versions.txt # Update for any new modules in google-cloud-java
          fi
          if [[ "$repo" == "googleapis/sdk-platform-java" ]]; then
            echo "Updating variables.yaml file for the auth library"
            python .github/workflows/javadocs_scripts/parse_pom_auth_library.py ${directory}/gapic-generator-java-pom-parent/pom.xml # Update auth library version
          fi
        done < .github/workflows/javadocs_scripts/repos_for_versionstxt.txt

    - name: Update links for handwritten libraries
      run: |
        while read -r repo directory tag artifact
        do
          echo "REPO=$repo"
          echo "DIRECTORY=$directory"
          echo "TAG=$tag"
          git clone https://github.com/${repo}.git
          git -C "${directory}" checkout $tag
          echo "Updating client and product documentation links using ${repo}'s .repo-metadata.json file"
          python .github/workflows/javadocs_scripts/updateClientProductDocumentationLinks.py # Update client/product doc links based on .repo-metadata.json files
        done < .github/workflows/javadocs_scripts/handwritten_libraries_javadocs_modules.txt

    - name: Update libraryTable
      run: |
        echo "Updating libraryTable"
        python .github/workflows/javadocs_scripts/libraryTable_generation.py # Run script to update the table of modules

    - name: Commit and push changes
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add $(git diff --name-only | grep "^site/")
        git commit -m "Update Github Pages site variables - automated" || true
        git push
